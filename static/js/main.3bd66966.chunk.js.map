{"version":3,"sources":["logo.svg","invalid.jpeg","Randomizer.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["secureRandom","require","randu","parseJSON","reviveBasePRNG","SHEET_ID","process","CLIENT_EMAIL","PRIVATE_KEY","g","private_key","doc","GoogleSpreadsheet","Randomizer","props","getCurrentList","a","useServiceAccountAuth","client_email","loadInfo","sheet","sheetsById","loadCells","setState","currentListId","getCell","value","console","error","saveListResults","listAmount","buildSaveString","i","state","showThisShit","length","log","ranAmount","saveUpdatedCells","document","getElementById","buttonText","defaultButton","role","onClick","doNothing","id","changeHandler","event","temp","target","handleClick","waitingForSave","waitingForValidation","huh","split","run","getRandoms","listInput","isValid","topImg","logo","topText","names","rand","str","this","tempObject","JSON","stringify","Error","message","nums","push","randomIndex","currentIndex","Math","floor","random","o","bytes","sort","b","order","buildOutput","printList","buildString","tag","startUpdateOfDom","then","cheating","firstRun","startCount","invalidGame","myVar","setInterval","clearInterval","temptext","innerText","invalidImg","src","className","alt","name","rows","cols","onChange","map","string","Component","Results","listID","allItems","listInfo","newLoc","window","location","hash","toString","replace","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.3bd66966.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/invalid.0d2fb83b.jpeg\";","import logo from './logo.svg';\nimport invalidImg from './invalid.jpeg';\nimport React, { Component } from \"react\";\nimport './App.css';\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport g from \"./g-sheets.json\";\nvar secureRandom = require('secure-random')\nvar randu = require( '@stdlib/random-base-randu' );\nvar parseJSON = require( '@stdlib/utils-parse-json' );\nvar reviveBasePRNG = require( '@stdlib/random-base-reviver' );\nconst SPREADSHEET_ID = process.env.REACT_APP_NEW_SHEET_ID;\nconst SHEET_ID = process.env.REACT_APP_NEW_LOCATION_ID;\nconst CLIENT_EMAIL = process.env.REACT_APP_NEW_CLIENT_EMAIL;\nconst PRIVATE_KEY = g.private_key;\nconst doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n\nclass Randomizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      listInput: [{\n        \"tag\": \"\",\n        \"order\": 0\n      }],\n      currentListId: null,\n      temp: \"\",\n      showThisShit: [],\n      isValid: \"Status: Legit\",\n      buttonText: <button role=\"link\" onClick={this.handleClick} id=\"buttonCheck\" value=\"default\">Randomize</button>,\n    defaultButton: <button role=\"link\" onClick={this.handleClick} id=\"buttonCheck\" value=\"default\">Randomize</button>,\n    waitingForSave: false,\n    waitingForValidation: false,\n      ranAmount: 0,\n      topImg: logo, \n      topText: \"Enter List Here\",\n      run: false\n    };\n  }\n  getCurrentList = async () => {\n    try {\n      await doc.useServiceAccountAuth({\n        client_email: CLIENT_EMAIL,\n        private_key: PRIVATE_KEY,\n      });\n      // loads document properties and worksheets\n      await doc.loadInfo();\n      // await doc.loadCells('A1:E10');\n      // console.log(doc.sheetsByIndex);\n\n      const sheet = doc.sheetsById[SHEET_ID];\n      await sheet.loadCells(\"A1:G6000\");\n      this.setState({currentListId: sheet.getCell(1, 2).value + 1})\n      // console.log(cities)\n      // sheet.getCell(cities[0].ID + 1, 4).value = true;\n      // await sheet.saveUpdatedCells();\n      //elim sheet info\n      //0 name\n      //1 id\n      // if (\n      //   !sheet.getCell(cities[0].ID + 1, 4).value\n      // ) {\n      //   window.history.replaceState(\n      //     null,\n      //     \"New Page Title\",\n      //     `#/?/${cities[0].ID + 1}/${cities[1].ID + 1}/${cities[2].ID + 1}/${\n      //       townName1\n      //     }/${townName2}/${townName3}`\n      //   );\n      // }\n    } catch (e) {\n      console.error(\"Error: \", e);\n    }\n  };\n  getRandoms(names){\n\n    console.log(this.state.showThisShit);\n    console.log(names)\n    var rand;\n    var str;\n    var i;\n    var tempObject = [];\n    \n    // Serialize the PRNG as a JSON string:\n    str = JSON.stringify( randu );\n    \n    // Revive the JSON-serialized PRNG:\n    rand = parseJSON( str, reviveBasePRNG );\n    if ( rand instanceof Error ) {\n        console.error( rand.message );\n    }\n    // Generate duplicate sequences...\n    let nums = [];\n    for ( i = 0; i < names.length + 5000; i++ ) {\n      nums.push(randu());\n    }\n      var currentIndex = nums.length,  randomIndex;\n    \n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n    \n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n    \n        // And swap it with the current element.\n        [nums[currentIndex], nums[randomIndex]] = [\n          nums[randomIndex], nums[currentIndex]];\n      }\n      console.log(names)\n    for(var o = 0; o < names.length; o++){\n      tempObject.push({\n        \"tag\": names[o],\n        \"order\": nums[o]\n      })\n    }\n    var bytes = secureRandom(10);\n    let randomSortMethod = Math.floor(Math.random() * bytes.length);\n    if(bytes[randomSortMethod] % 2){\n      tempObject.sort(function(a,b){\n        return b.order - a.order\n      })\n    }else {\n      tempObject.sort(function(a,b){\n        return a.order - b.order\n      })\n    }\n \n    this.setState({listInput: tempObject})\n    this.buildOutput(tempObject);\n  }\n  buildOutput(printList){\n    console.log(\"here\")\n    let buildString = [];\n    for(var i = 0; i < printList.length; i++){\n      // console.log(\"runnin\")\n      buildString.push(printList[i].tag);\n    }\n    this.setState({showThisShit: buildString});\n    this.setState({run: true})\n    this.setState({topText: \"Please Wait... Validating Result\"});\n    this.startUpdateOfDom(this, buildString, true, 0, 0);\n  }\n\n  startUpdateOfDom(then, buildString, cheating, firstRun, startCount) {\n    // let ok = then;\n    \n    console.log(firstRun)\n    let invalidGame = false;\n    var myVar = setInterval(function(){\n      startCount++;\n      console.log(then.state.run)\n      if(!then.state.run || startCount > 5){\n        if(document.getElementById(\"buttonCheck\").value === \"save\"){\n            then.setState({buttonText: then.state.defaultButton})\n          }else {\n            //   document.getElementById(\"general\").value = \"validation\";\n            then.setState({buttonText: <button role=\"link\" onClick={then.doNothing} id=\"buttonCheck\" value=\"validation\">Waiting For Results To Save</button>})\n          }\n            then.setState({buttonText: then.state.defaultButton})\n        if(!invalidGame){\n        then.setState({topText: \"Result Is Valid\"});\n        }\n        clearInterval(myVar);\n      }else {\n\n        let temptext = document.getElementById(\"listItems\").innerText;\n        temptext = temptext.split(/\\n/g)||[];\n\n        if(temptext.length !== buildString.length){\n          invalidGame = true;\n        }\n        for(var i = 0; i < buildString.length && !invalidGame; i++){\n          if(buildString[i] !== temptext[i]){\n            invalidGame = true;\n            break;\n          }\n        }\n        if(invalidGame){\n          // console.log(\"INVALID GAME\")\n          then.setState({isValid: \"INVALID RESULT INVALID RESULT\"})\n          then.setState({topText: \"INVALID RESULT INVALID RESULT\"});\n          then.setState({ranAmount: \"----\"});\n          then.setState({topImg: invalidImg})\n          cheating = !cheating;\n          // if(cheating){\n          //   document.getElementById(\"App-Wrap\").style = 'background-color: white;';\n          // }else document.getElementById(\"App-Wrap\").style = 'background-color: red;';\n          \n        }\n        // console.log(temptext);\n        // console.log(buildString);\n        // console.log(then.state.showThisShit)\n        firstRun++;\n        // then.startUpdateOfDom(then, buildString, cheating, firstRun)\n      }\n    }, 1000)\n    // if(then.state.run){\n    //   setTimeout(function(){\n\n        \n    \n    //   }, 500)\n    // }\n\n  }\n  saveListResults = async () =>{\n    try {\n        await doc.useServiceAccountAuth({\n          client_email: CLIENT_EMAIL,\n          private_key: PRIVATE_KEY,\n        });\n        await doc.loadInfo();\n        const sheet = doc.sheetsById[SHEET_ID];\n        await sheet.loadCells(\"A1:C60000\");\n        let listAmount = sheet.getCell(1, 2).value;\n        let buildSaveString = \"\";\n        for(var i = 0; i < this.state.showThisShit.length; i++){\n            buildSaveString += this.state.showThisShit[i] + \"<li>\"\n        }\n        console.log(this.state.currentListId, listAmount)\n        if(this.state.currentListId === listAmount){\n            sheet.getCell(listAmount, 1).value = buildSaveString;\n            sheet.getCell(listAmount, 3).value = this.state.ranAmount ;\n            await sheet.saveUpdatedCells();\n            if(document.getElementById(\"buttonCheck\").value === \"validation\"){\n                this.setState({buttonText: this.state.defaultButton})\n              }else {\n                this.setState({buttonText: <button role=\"link\" onClick={this.doNothing} id=\"buttonCheck\" value=\"save\">Waiting For Validation To Run</button>})\n              }\n            console.log(\"updated old\")\n        }else {\n            sheet.getCell(this.state.currentListId, 1).value = buildSaveString;\n            sheet.getCell(this.state.currentListId, 0).value = this.state.currentListId;\n            sheet.getCell(1, 2).value = this.state.currentListId ;\n            sheet.getCell(this.state.currentListId, 3).value = this.state.ranAmount ;\n            await sheet.saveUpdatedCells();\n            if(document.getElementById(\"buttonCheck\").value === \"validation\"){\n                this.setState({buttonText: this.state.defaultButton})\n              }else {\n                this.setState({buttonText: <button role=\"link\" onClick={this.doNothing} id=\"buttonCheck\" value=\"save\">Waiting For Validation To Run</button>})\n              }\n            console.log(\"saved new\")\n        }\n        // console.log(cities)\n        // sheet.getCell(cities[0].ID + 1, 4).value = true;\n        // await sheet.saveUpdatedCells();\n        //elim sheet info\n        //0 name\n        //1 id\n        // if (\n        //   !sheet.getCell(cities[0].ID + 1, 4).value\n        // ) {\n        //   window.history.replaceState(\n        //     null,\n        //     \"New Page Title\",\n        //     `#/?/${cities[0].ID + 1}/${cities[1].ID + 1}/${cities[2].ID + 1}/${\n        //       townName1\n        //     }/${townName2}/${townName3}`\n        //   );\n        // }\n      } catch (e) {\n        console.error(\"Error: \", e);\n      }\n  }\n  componentDidMount(){\n    this.getCurrentList();\n    // this.saveListResults();\n  }\n  changeHandler = (event) => {\n    // state.listInput = event;\n    this.setState({temp: event.target.value})\n  };\n   handleClick = async (event) => {\n       this.setState({waitingForSave: true});\n       this.setState({waitingForValidation: true});\n    this.setState({ranAmount: this.state.ranAmount + 1});\n    let huh = this.state.temp.split(/\\n/g)||[];\n    this.setState({run: false})\n    this.setState({buttonText:  <button role=\"link\" onClick={this.doNothing} id=\"buttonCheck\" value=\"waiting\">\n    WAIT\n  </button>})\n    this.getRandoms(huh);\n    this.saveListResults();\n    // console.log(huh);\n    // console.log(this.state.temp)\n  };\n  doNothing = async(event) => {\n    console.log(\"waiting clicked too fast\")\n  };\n  render(){\n  return (\n<>\n        <img src={this.state.topImg} className=\"App-logo\" alt=\"logo\" />\n        <h1 id=\"is-valid\">{this.state.isValid}</h1>\n        <h2 id=\"result-url\">VALIDATE THE RESULTS HERE: https://www.wafflemaster.org/#/result/{this.state.currentListId}</h2>\n        <label>This list has been randomized: {this.state.ranAmount} times</label>\n        <label>{this.state.topText}</label>\n\n<textarea id=\"w3review\" name=\"w3review\" rows=\"4\" cols=\"50\" \nvalue={this.state.temp}\nonChange={this.changeHandler}>\n\n</textarea>\n{this.state.buttonText}\n          <ol id=\"listItems\">\n          {this.state.showThisShit.map((string) => (\n              <li>{string}</li>\n            ))} \n          </ol>\n     \n    </>\n  );\n  }\n}\nexport default Randomizer;\n// ReactDOM.render(<App />, document.getElementById(\"app\"));\n\n\n","import logo from './logo.svg';\nimport React, { Component } from \"react\";\nimport './App.css';\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\nimport g from \"./g-sheets.json\";\nconst SPREADSHEET_ID = process.env.REACT_APP_NEW_SHEET_ID;\nconst SHEET_ID = process.env.REACT_APP_NEW_LOCATION_ID;\nconst CLIENT_EMAIL = process.env.REACT_APP_NEW_CLIENT_EMAIL;\nconst PRIVATE_KEY = g.private_key;\nconst doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        listInfo: [],\n      topImg: logo, \n      ranAmount: 0,\n    };\n  }\n  getCurrentList = async (listID) => {\n    try {\n      await doc.useServiceAccountAuth({\n        client_email: CLIENT_EMAIL,\n        private_key: PRIVATE_KEY,\n      });\n      await doc.loadInfo();\n      const sheet = doc.sheetsById[SHEET_ID];\n      await sheet.loadCells(\"A1:D60000\");\n      let allItems = sheet.getCell(listID, 1).value;\n      allItems = allItems.split(\"<li>\");\n      this.setState({listInfo: allItems})\n      this.setState({ranAmount: sheet.getCell(listID, 3).value});\n      console.log(sheet.getCell(listID, 0).value)\n      // console.log(cities)\n      // sheet.getCell(cities[0].ID + 1, 4).value = true;\n      // await sheet.saveUpdatedCells();\n      //elim sheet info\n      //0 name\n      //1 id\n      // if (\n      //   !sheet.getCell(cities[0].ID + 1, 4).value\n      // ) {\n      //   window.history.replaceState(\n      //     null,\n      //     \"New Page Title\",\n      //     `#/?/${cities[0].ID + 1}/${cities[1].ID + 1}/${cities[2].ID + 1}/${\n      //       townName1\n      //     }/${townName2}/${townName3}`\n      //   );\n      // }\n    } catch (e) {\n      console.error(\"Error: \", e);\n    }\n  };\n  componentDidMount(){\n    let newLoc = window.location.hash.toString().replace(\"#/result/\", \"\");\n    console.log(newLoc)\n    this.getCurrentList(newLoc)\n  }\n\n  render(){\n  return (\n<>\n        <img src={this.state.topImg} className=\"App-logo\" alt=\"logo\" />\n        <label>Results From Randomizer</label>\n        <br></br>\n        <label>This List Was Randomized: {this.state.ranAmount} times</label>\n\n          <ol id=\"listItems\">\n          {this.state.listInfo.map((string) => (\n              <li>{string}</li>\n            ))} \n          </ol>\n     \n    </>\n  );\n  }\n}\nexport default Results;\n// ReactDOM.render(<App />, document.getElementById(\"app\"));\n\n\n","\nimport React, { Component } from \"react\";\nimport Randomizer from \"./Randomizer\";\nimport Results from \"./Results\";\nimport {HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nclass App extends Component {\n\n  \n  render(){\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" id=\"App-Wrap\">\n      <Router>\n          <Switch>\n            {/* <Route exact path=\"/trial\" component={withTracker(Trial)} /> */}\n            <Route\n              exact path=\"/\"\n              render={() => (\n                <Randomizer/>\n              )}\n            />\n              <Route\n              path=\"/result\"\n              render={() => (\n                <Results/>\n              )}\n            />\n            </Switch>\n       </Router>\n    \n      </header>\n    </div>\n  );\n  }\n}\nexport default App;\n// ReactDOM.render(<App />, document.getElementById(\"app\"));\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}